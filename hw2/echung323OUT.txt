==== PART B ====

++ Water Jugs ++

    (depth-first-search *start* *goals* *moves*)
    First node on open list: ((0 0) NIL).
    First node on open list: ((5 0) ((0 0))).
    First node on open list: ((5 3) ((5 0) (0 0))).
    First node on open list: ((0 3) ((5 3) (5 0) (0 0))).
    First node on open list: ((3 0) ((0 3) (5 3) (5 0) (0 0))).
    First node on open list: ((2 3) ((5 0) (0 0))).
    First node on open list: ((2 0) ((2 3) (5 0) (0 0))).
    First node on open list: ((0 2) ((2 0) (2 3) (5 0) (0 0))).
    First node on open list: ((5 2) ((0 2) (2 0) (2 3) (5 0) (0 0))).
    First node on open list: ((4 3) ((5 2) (0 2) (2 0) (2 3) (5 0) (0 0))).
    Found goal: (4 0)
    Solution path: ((0 0) (5 0) (2 3) (2 0) (0 2) (5 2) (4 3) (4 0))
    Length of open list: 7
    Length of closed list: 10
    T

    (breadth-first-search *start* *goals* *moves*)
    First node on open list: ((0 0) NIL).
    First node on open list: ((5 0) ((0 0))).
    First node on open list: ((0 3) ((0 0))).
    First node on open list: ((5 3) ((5 0) (0 0))).
    First node on open list: ((2 3) ((5 0) (0 0))).
    First node on open list: ((3 0) ((0 3) (0 0))).
    First node on open list: ((2 0) ((2 3) (5 0) (0 0))).
    First node on open list: ((0 2) ((2 0) (2 3) (5 0) (0 0))).
    First node on open list: ((5 2) ((0 2) (2 0) (2 3) (5 0) (0 0))).
    First node on open list: ((4 3) ((5 2) (0 2) (2 0) (2 3) (5 0) (0 0))).
    Found goal: (4 0)
    Solution path: ((0 0) (5 0) (2 3) (2 0) (0 2) (5 2) (4 3) (4 0))
    Length of open list: 2
    Length of closed list: 10
    T

++ 8-Tile Puzzle ++

    (depth-first-search *startC* *goals* *moves*)
    . . cut . .
    First node on open list: ((1 2 0 4 5 3 7 8 6)
    ((1 0 2 4 5 3 7 8 6) (1 5 2 4 0 3 7 8 6) (1 5 2 4 8 3 7 0 6)
    . . cut . .
    (0 2 3 1 5 6 4 7 8) (1 2 3 0 5 6 4 7 8) (1 2 3 4 5 6 0 7 8))).
    First node on open list: ((1 2 3 4 5 0 7 8 6)
    ((1 2 0 4 5 3 7 8 6) (1 0 2 4 5 3 7 8 6) (1 5 2 4 0 3 7 8 6)
    . . cut . .
    (0 2 3 1 5 6 4 7 8) (1 2 3 0 5 6 4 7 8) (1 2 3 4 5 6 0 7 8))).
    Found goal: (1 2 3 4 5 6 7 8 0)
    Solution path: ((1 2 3 4 5 6 0 7 8) (1 2 3 0 5 6 4 7 8) (0 2 3 1 5 6 4 7 8)
    (2 0 3 1 5 6 4 7 8) (2 5 3 1 0 6 4 7 8) (2 5 3 1 7 6 4 0 8)
    (2 5 3 1 7 6 4 8 0) (2 5 3 1 7 0 4 8 6) (2 5 0 1 7 3 4 8 6)
    (2 0 5 1 7 3 4 8 6) (2 7 5 1 0 3 4 8 6) (2 7 5 1 8 3 4 0 6)
    (2 7 5 1 8 3 4 6 0) (2 7 5 1 8 0 4 6 3) (2 7 0 1 8 5 4 6 3)
    (2 0 7 1 8 5 4 6 3) (2 8 7 1 0 5 4 6 3) (2 8 7 1 6 5 4 0 3)
    (2 8 7 1 6 5 4 3 0) (2 8 7 1 6 0 4 3 5) (2 8 0 1 6 7 4 3 5)
    (2 0 8 1 6 7 4 3 5) (2 6 8 1 0 7 4 3 5) (2 6 8 1 3 7 4 0 5)
    (2 6 8 1 3 7 4 5 0) (2 6 8 1 3 0 4 5 7) (2 6 0 1 3 8 4 5 7)
    (2 0 6 1 3 8 4 5 7) (2 3 6 1 0 8 4 5 7) (2 3 6 1 5 8 4 0 7)
    (2 3 6 1 5 8 4 7 0) (2 3 6 1 5 0 4 7 8) (2 3 6 1 0 5 4 7 8)
    (2 0 6 1 3 5 4 7 8) (2 6 0 1 3 5 4 7 8) (2 6 5 1 3 0 4 7 8)
    (2 6 5 1 3 8 4 7 0) (2 6 5 1 3 8 4 0 7) (2 6 5 1 0 8 4 3 7)
    (2 0 5 1 6 8 4 3 7) (2 5 0 1 6 8 4 3 7) (2 5 8 1 6 0 4 3 7)
    (2 5 8 1 6 7 4 3 0) (2 5 8 1 6 7 4 0 3) (2 5 8 1 0 7 4 6 3)
    (2 0 8 1 5 7 4 6 3) (2 8 0 1 5 7 4 6 3) (2 8 7 1 5 0 4 6 3)
    (2 8 7 1 5 3 4 6 0) (2 8 7 1 5 3 4 0 6) (2 8 7 1 0 3 4 5 6)
    (2 0 7 1 8 3 4 5 6) (2 7 0 1 8 3 4 5 6) (2 7 3 1 8 0 4 5 6)
    (2 7 3 1 8 6 4 5 0) (2 7 3 1 8 6 4 0 5) (2 7 3 1 0 6 4 8 5)
    (2 0 3 1 7 6 4 8 5) (2 3 0 1 7 6 4 8 5) (2 3 6 1 7 0 4 8 5)
    (2 3 6 1 7 5 4 8 0) (2 3 6 1 7 5 4 0 8) (2 3 6 1 7 5 0 4 8)
    (2 3 6 0 7 5 1 4 8) (0 3 6 2 7 5 1 4 8) (3 0 6 2 7 5 1 4 8)
    (3 7 6 2 0 5 1 4 8) (3 7 6 2 4 5 1 0 8) (3 7 6 2 4 5 1 8 0)
    (3 7 6 2 4 0 1 8 5) (3 7 0 2 4 6 1 8 5) (3 0 7 2 4 6 1 8 5)
    (3 4 7 2 0 6 1 8 5) (3 4 7 2 8 6 1 0 5) (3 4 7 2 8 6 1 5 0)
    (3 4 7 2 8 0 1 5 6) (3 4 0 2 8 7 1 5 6) (3 0 4 2 8 7 1 5 6)
    (3 8 4 2 0 7 1 5 6) (3 8 4 2 5 7 1 0 6) (3 8 4 2 5 7 1 6 0)
    (3 8 4 2 5 0 1 6 7) (3 8 0 2 5 4 1 6 7) (3 0 8 2 5 4 1 6 7)
    (3 5 8 2 0 4 1 6 7) (3 5 8 2 6 4 1 0 7) (3 5 8 2 6 4 1 7 0)
    (3 5 8 2 6 0 1 7 4) (3 5 0 2 6 8 1 7 4) (3 0 5 2 6 8 1 7 4)
    (3 6 5 2 0 8 1 7 4) (3 6 5 2 7 8 1 0 4) (3 6 5 2 7 8 1 4 0)
    (3 6 5 2 7 0 1 4 8) (3 6 5 2 0 7 1 4 8) (3 0 5 2 6 7 1 4 8)
    (3 5 0 2 6 7 1 4 8) (3 5 7 2 6 0 1 4 8) (3 5 7 2 6 8 1 4 0)
    (3 5 7 2 6 8 1 0 4) (3 5 7 2 0 8 1 6 4) (3 0 7 2 5 8 1 6 4)
    (3 7 0 2 5 8 1 6 4) (3 7 8 2 5 0 1 6 4) (3 7 8 2 5 4 1 6 0)
    (3 7 8 2 5 4 1 0 6) (3 7 8 2 0 4 1 5 6) (3 0 8 2 7 4 1 5 6)
    (3 8 0 2 7 4 1 5 6) (3 8 4 2 7 0 1 5 6) (3 8 4 2 7 6 1 5 0)
    (3 8 4 2 7 6 1 0 5) (3 8 4 2 0 6 1 7 5) (3 0 4 2 8 6 1 7 5)
    (3 4 0 2 8 6 1 7 5) (3 4 6 2 8 0 1 7 5) (3 4 6 2 8 5 1 7 0)
    (3 4 6 2 8 5 1 0 7) (3 4 6 2 0 5 1 8 7) (3 0 6 2 4 5 1 8 7)
    (3 6 0 2 4 5 1 8 7) (3 6 5 2 4 0 1 8 7) (3 6 5 2 4 7 1 8 0)
    (3 6 5 2 4 7 1 0 8) (3 6 5 2 4 7 0 1 8) (3 6 5 0 4 7 2 1 8)
    (0 6 5 3 4 7 2 1 8) (6 0 5 3 4 7 2 1 8) (6 4 5 3 0 7 2 1 8)
    (6 4 5 3 1 7 2 0 8) (6 4 5 3 1 7 2 8 0) (6 4 5 3 1 0 2 8 7)
    (6 4 0 3 1 5 2 8 7) (6 0 4 3 1 5 2 8 7) (6 1 4 3 0 5 2 8 7)
    (6 1 4 3 8 5 2 0 7) (6 1 4 3 8 5 2 7 0) (6 1 4 3 8 0 2 7 5)
    (6 1 0 3 8 4 2 7 5) (6 0 1 3 8 4 2 7 5) (6 8 1 3 0 4 2 7 5)
    (6 8 1 3 7 4 2 0 5) (6 8 1 3 7 4 2 5 0) (6 8 1 3 7 0 2 5 4)
    (6 8 0 3 7 1 2 5 4) (6 0 8 3 7 1 2 5 4) (6 7 8 3 0 1 2 5 4)
    (6 7 8 3 5 1 2 0 4) (6 7 8 3 5 1 2 4 0) (6 7 8 3 5 0 2 4 1)
    (6 7 0 3 5 8 2 4 1) (6 0 7 3 5 8 2 4 1) (6 5 7 3 0 8 2 4 1)
    (6 5 7 3 4 8 2 0 1) (6 5 7 3 4 8 2 1 0) (6 5 7 3 4 0 2 1 8)
    (6 5 7 3 0 4 2 1 8) (6 0 7 3 5 4 2 1 8) (6 7 0 3 5 4 2 1 8)
    (6 7 4 3 5 0 2 1 8) (6 7 4 3 5 8 2 1 0) (6 7 4 3 5 8 2 0 1)
    (6 7 4 3 0 8 2 5 1) (6 0 4 3 7 8 2 5 1) (6 4 0 3 7 8 2 5 1)
    (6 4 8 3 7 0 2 5 1) (6 4 8 3 7 1 2 5 0) (6 4 8 3 7 1 2 0 5)
    (6 4 8 3 0 1 2 7 5) (6 0 8 3 4 1 2 7 5) (6 8 0 3 4 1 2 7 5)
    (6 8 1 3 4 0 2 7 5) (6 8 1 3 4 5 2 7 0) (6 8 1 3 4 5 2 0 7)
    (6 8 1 3 0 5 2 4 7) (6 0 1 3 8 5 2 4 7) (6 1 0 3 8 5 2 4 7)
    (6 1 5 3 8 0 2 4 7) (6 1 5 3 8 7 2 4 0) (6 1 5 3 8 7 2 0 4)
    (6 1 5 3 0 7 2 8 4) (6 0 5 3 1 7 2 8 4) (6 5 0 3 1 7 2 8 4)
    (6 5 7 3 1 0 2 8 4) (6 5 7 3 1 4 2 8 0) (6 5 7 3 1 4 2 0 8)
    (6 5 7 3 1 4 0 2 8) (6 5 7 0 1 4 3 2 8) (0 5 7 6 1 4 3 2 8)
    (5 0 7 6 1 4 3 2 8) (5 1 7 6 0 4 3 2 8) (5 1 7 6 2 4 3 0 8)
    (5 1 7 6 2 4 3 8 0) (5 1 7 6 2 0 3 8 4) (5 1 0 6 2 7 3 8 4)
    (5 0 1 6 2 7 3 8 4) (5 2 1 6 0 7 3 8 4) (5 2 1 6 8 7 3 0 4)
    (5 2 1 6 8 7 3 4 0) (5 2 1 6 8 0 3 4 7) (5 2 0 6 8 1 3 4 7)
    (5 0 2 6 8 1 3 4 7) (5 8 2 6 0 1 3 4 7) (5 8 2 6 4 1 3 0 7)
    (5 8 2 6 4 1 3 7 0) (5 8 2 6 4 0 3 7 1) (5 8 0 6 4 2 3 7 1)
    (5 0 8 6 4 2 3 7 1) (5 4 8 6 0 2 3 7 1) (5 4 8 6 7 2 3 0 1)
    (5 4 8 6 7 2 3 1 0) (5 4 8 6 7 0 3 1 2) (5 4 0 6 7 8 3 1 2)
    (5 0 4 6 7 8 3 1 2) (5 7 4 6 0 8 3 1 2) (5 7 4 6 1 8 3 0 2)
    (5 7 4 6 1 8 3 2 0) (5 7 4 6 1 0 3 2 8) (5 7 4 6 0 1 3 2 8)
    (5 0 4 6 7 1 3 2 8) (5 4 0 6 7 1 3 2 8) (5 4 1 6 7 0 3 2 8)
    (5 4 1 6 7 8 3 2 0) (5 4 1 6 7 8 3 0 2) (5 4 1 6 0 8 3 7 2)
    (5 0 1 6 4 8 3 7 2) (5 1 0 6 4 8 3 7 2) (5 1 8 6 4 0 3 7 2)
    (5 1 8 6 4 2 3 7 0) (5 1 8 6 4 2 3 0 7) (5 1 8 6 0 2 3 4 7)
    (5 0 8 6 1 2 3 4 7) (5 8 0 6 1 2 3 4 7) (5 8 2 6 1 0 3 4 7)
    (5 8 2 6 1 7 3 4 0) (5 8 2 6 1 7 3 0 4) (5 8 2 6 0 7 3 1 4)
    (5 0 2 6 8 7 3 1 4) (5 2 0 6 8 7 3 1 4) (5 2 7 6 8 0 3 1 4)
    (5 2 7 6 8 4 3 1 0) (5 2 7 6 8 4 3 0 1) (5 2 7 6 0 4 3 8 1)
    (5 0 7 6 2 4 3 8 1) (5 7 0 6 2 4 3 8 1) (5 7 4 6 2 0 3 8 1)
    (5 7 4 6 2 1 3 8 0) (5 7 4 6 2 1 3 0 8) (5 7 4 6 2 1 0 3 8)
    (5 7 4 0 2 1 6 3 8) (0 7 4 5 2 1 6 3 8) (7 0 4 5 2 1 6 3 8)
    (7 2 4 5 0 1 6 3 8) (7 2 4 5 3 1 6 0 8) (7 2 4 5 3 1 6 8 0)
    (7 2 4 5 3 0 6 8 1) (7 2 0 5 3 4 6 8 1) (7 0 2 5 3 4 6 8 1)
    (7 3 2 5 0 4 6 8 1) (7 3 2 5 8 4 6 0 1) (7 3 2 5 8 4 6 1 0)
    (7 3 2 5 8 0 6 1 4) (7 3 0 5 8 2 6 1 4) (7 0 3 5 8 2 6 1 4)
    (7 8 3 5 0 2 6 1 4) (7 8 3 5 1 2 6 0 4) (7 8 3 5 1 2 6 4 0)
    (7 8 3 5 1 0 6 4 2) (7 8 0 5 1 3 6 4 2) (7 0 8 5 1 3 6 4 2)
    (7 1 8 5 0 3 6 4 2) (7 1 8 5 4 3 6 0 2) (7 1 8 5 4 3 6 2 0)
    (7 1 8 5 4 0 6 2 3) (7 1 0 5 4 8 6 2 3) (7 0 1 5 4 8 6 2 3)
    (7 4 1 5 0 8 6 2 3) (7 4 1 5 2 8 6 0 3) (7 4 1 5 2 8 6 3 0)
    (7 4 1 5 2 0 6 3 8) (7 4 1 5 0 2 6 3 8) (7 0 1 5 4 2 6 3 8)
    (7 1 0 5 4 2 6 3 8) (7 1 2 5 4 0 6 3 8) (7 1 2 5 4 8 6 3 0)
    (7 1 2 5 4 8 6 0 3) (7 1 2 5 0 8 6 4 3) (7 0 2 5 1 8 6 4 3)
    (7 2 0 5 1 8 6 4 3) (7 2 8 5 1 0 6 4 3) (7 2 8 5 1 3 6 4 0)
    (7 2 8 5 1 3 6 0 4) (7 2 8 5 0 3 6 1 4) (7 0 8 5 2 3 6 1 4)
    (7 8 0 5 2 3 6 1 4) (7 8 3 5 2 0 6 1 4) (7 8 3 5 2 4 6 1 0)
    (7 8 3 5 2 4 6 0 1) (7 8 3 5 0 4 6 2 1) (7 0 3 5 8 4 6 2 1)
    (7 3 0 5 8 4 6 2 1) (7 3 4 5 8 0 6 2 1) (7 3 4 5 8 1 6 2 0)
    (7 3 4 5 8 1 6 0 2) (7 3 4 5 0 1 6 8 2) (7 0 4 5 3 1 6 8 2)
    (7 4 0 5 3 1 6 8 2) (7 4 1 5 3 0 6 8 2) (7 4 1 5 3 2 6 8 0)
    (7 4 1 5 3 2 6 0 8) (7 4 1 5 3 2 0 6 8) (7 4 1 0 3 2 5 6 8)
    (0 4 1 7 3 2 5 6 8) (4 0 1 7 3 2 5 6 8) (4 3 1 7 0 2 5 6 8)
    (4 3 1 7 6 2 5 0 8) (4 3 1 7 6 2 5 8 0) (4 3 1 7 6 0 5 8 2)
    (4 3 0 7 6 1 5 8 2) (4 0 3 7 6 1 5 8 2) (4 6 3 7 0 1 5 8 2)
    (4 6 3 7 8 1 5 0 2) (4 6 3 7 8 1 5 2 0) (4 6 3 7 8 0 5 2 1)
    (4 6 0 7 8 3 5 2 1) (4 0 6 7 8 3 5 2 1) (4 8 6 7 0 3 5 2 1)
    (4 8 6 7 2 3 5 0 1) (4 8 6 7 2 3 5 1 0) (4 8 6 7 2 0 5 1 3)
    (4 8 0 7 2 6 5 1 3) (4 0 8 7 2 6 5 1 3) (4 2 8 7 0 6 5 1 3)
    (4 2 8 7 1 6 5 0 3) (4 2 8 7 1 6 5 3 0) (4 2 8 7 1 0 5 3 6)
    (4 2 0 7 1 8 5 3 6) (4 0 2 7 1 8 5 3 6) (4 1 2 7 0 8 5 3 6)
    (4 1 2 7 3 8 5 0 6) (4 1 2 7 3 8 5 6 0) (4 1 2 7 3 0 5 6 8)
    (4 1 2 7 0 3 5 6 8) (4 0 2 7 1 3 5 6 8) (4 2 0 7 1 3 5 6 8)
    (4 2 3 7 1 0 5 6 8) (4 2 3 7 1 8 5 6 0) (4 2 3 7 1 8 5 0 6)
    (4 2 3 7 0 8 5 1 6) (4 0 3 7 2 8 5 1 6) (4 3 0 7 2 8 5 1 6)
    (4 3 8 7 2 0 5 1 6) (4 3 8 7 2 6 5 1 0) (4 3 8 7 2 6 5 0 1)
    (4 3 8 7 0 6 5 2 1) (4 0 8 7 3 6 5 2 1) (4 8 0 7 3 6 5 2 1)
    (4 8 6 7 3 0 5 2 1) (4 8 6 7 3 1 5 2 0) (4 8 6 7 3 1 5 0 2)
    (4 8 6 7 0 1 5 3 2) (4 0 6 7 8 1 5 3 2) (4 6 0 7 8 1 5 3 2)
    (4 6 1 7 8 0 5 3 2) (4 6 1 7 8 2 5 3 0) (4 6 1 7 8 2 5 0 3)
    (4 6 1 7 0 2 5 8 3) (4 0 1 7 6 2 5 8 3) (4 1 0 7 6 2 5 8 3)
    (4 1 2 7 6 0 5 8 3) (4 1 2 7 6 3 5 8 0) (4 1 2 7 6 3 5 0 8)
    (4 1 2 7 6 3 0 5 8) (4 1 2 0 6 3 7 5 8) (0 1 2 4 6 3 7 5 8)
    (1 0 2 4 6 3 7 5 8) (1 6 2 4 0 3 7 5 8) (1 6 2 4 5 3 7 0 8)
    (1 6 2 4 5 3 7 8 0) (1 6 2 4 5 0 7 8 3) (1 6 0 4 5 2 7 8 3)
    (1 0 6 4 5 2 7 8 3) (1 5 6 4 0 2 7 8 3) (1 5 6 4 8 2 7 0 3)
    (1 5 6 4 8 2 7 3 0) (1 5 6 4 8 0 7 3 2) (1 5 0 4 8 6 7 3 2)
    (1 0 5 4 8 6 7 3 2) (1 8 5 4 0 6 7 3 2) (1 8 5 4 3 6 7 0 2)
    (1 8 5 4 3 6 7 2 0) (1 8 5 4 3 0 7 2 6) (1 8 0 4 3 5 7 2 6)
    (1 0 8 4 3 5 7 2 6) (1 3 8 4 0 5 7 2 6) (1 3 8 4 2 5 7 0 6)
    (1 3 8 4 2 5 7 6 0) (1 3 8 4 2 0 7 6 5) (1 3 0 4 2 8 7 6 5)
    (1 0 3 4 2 8 7 6 5) (1 2 3 4 0 8 7 6 5) (1 2 3 4 6 8 7 0 5)
    (1 2 3 4 6 8 7 5 0) (1 2 3 4 6 0 7 5 8) (1 2 3 4 0 6 7 5 8)
    (1 0 3 4 2 6 7 5 8) (1 3 0 4 2 6 7 5 8) (1 3 6 4 2 0 7 5 8)
    (1 3 6 4 2 8 7 5 0) (1 3 6 4 2 8 7 0 5) (1 3 6 4 0 8 7 2 5)
    (1 0 6 4 3 8 7 2 5) (1 6 0 4 3 8 7 2 5) (1 6 8 4 3 0 7 2 5)
    (1 6 8 4 3 5 7 2 0) (1 6 8 4 3 5 7 0 2) (1 6 8 4 0 5 7 3 2)
    (1 0 8 4 6 5 7 3 2) (1 8 0 4 6 5 7 3 2) (1 8 5 4 6 0 7 3 2)
    (1 8 5 4 6 2 7 3 0) (1 8 5 4 6 2 7 0 3) (1 8 5 4 0 2 7 6 3)
    (1 0 5 4 8 2 7 6 3) (1 5 0 4 8 2 7 6 3) (1 5 2 4 8 0 7 6 3)
    (1 5 2 4 8 3 7 6 0) (1 5 2 4 8 3 7 0 6) (1 5 2 4 0 3 7 8 6)
    (1 0 2 4 5 3 7 8 6) (1 2 0 4 5 3 7 8 6) (1 2 3 4 5 0 7 8 6)
    (1 2 3 4 5 6 7 8 0))
    Length of open list: 554
    Length of closed list: 439
    T

    (breadth-first-search *startA* *goals* *moves*)
    First node on open list: ((1 2 3 4 8 5 7 0 6) NIL).
    First node on open list: ((1 2 3 4 0 5 7 8 6) ((1 2 3 4 8 5 7 0 6))).
    First node on open list: ((1 2 3 4 8 5 7 6 0) ((1 2 3 4 8 5 7 0 6))).
    First node on open list: ((1 2 3 4 8 5 0 7 6) ((1 2 3 4 8 5 7 0 6))).
    First node on open list: ((1 0 3 4 2 5 7 8 6) ((1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6))).
    First node on open list: ((1 2 3 4 5 0 7 8 6) ((1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6))).
    First node on open list: ((1 2 3 0 4 5 7 8 6) ((1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6))).
    First node on open list: ((1 2 3 4 8 0 7 6 5) ((1 2 3 4 8 5 7 6 0) (1 2 3 4 8 5 7 0 6))).
    First node on open list: ((1 2 3 0 8 5 4 7 6) ((1 2 3 4 8 5 0 7 6) (1 2 3 4 8 5 7 0 6))).
    First node on open list: ((1 3 0 4 2 5 7 8 6)
    ((1 0 3 4 2 5 7 8 6) (1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6))).
    First node on open list: ((0 1 3 4 2 5 7 8 6)
    ((1 0 3 4 2 5 7 8 6) (1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6))).
    First node on open list: ((1 2 0 4 5 3 7 8 6)
    ((1 2 3 4 5 0 7 8 6) (1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6))).
    Found goal: (1 2 3 4 5 6 7 8 0)
    Solution path: ((1 2 3 4 8 5 7 0 6) (1 2 3 4 0 5 7 8 6) (1 2 3 4 5 0 7 8 6)
    (1 2 3 4 5 6 7 8 0))
    Length of open list: 17
    Length of closed list: 12
    T

==== PART C ====

++ Missionaries & Cannibals ++

    The A* search performed worse than both DFS and BFS, and DFS outperformed both BFS and A* by a wide margin.
    The reason for this is likely due to the heuristic function used for the A* search, since it assumes that the
    sum of missionaries and cannibals on the left bank to 0 means its closer to the goal state. It could be putting
    nodes in front that will result in some rule being broken. A smarter heuristic would need to take the rules account.

    (depth-first-search *start* *goals* *moves*)
    . . cut . .
    Found goal: (0 0 E)
    Solution path: ((3 3 W) (1 3 E) (2 3 W) (0 3 E) (1 3 W) (1 1 E) (2 2 W) (2 0 E) (3 0 W)
    (1 0 E) (2 0 W) (0 0 E))
    Length of open list: 9
    Length of closed list: 12
    T

    (breadth-first-search *start* *goals* *moves*)
    . . cut . . 
    Found goal: (0 0 E)
    Solution path: ((3 3 W) (1 3 E) (2 3 W) (0 3 E) (1 3 W) (1 1 E) (2 2 W) (2 0 E) (3 0 W)
    (1 0 E) (2 0 W) (0 0 E))
    Length of open list: 3
    Length of closed list: 14
    T

    (a-star-search *start* *goals* *moves* *h*)
    . . cut . .
    Found goal: (0 0 E)
    Solution path: ((3 3 W) (2 2 E) (2 3 W) (0 3 E) (1 3 W) (1 1 E) (2 2 W) (2 0 E) (3 0 W)
    (1 0 E) (1 1 W) (0 0 E))
    Length of open list: 2
    Length of closed list: 14
    T

++ Water Jugs ++

    The A* search did reduce the number of nodes searched, as evident by the length of the open list.
    All of the searches resulted in the same closed list length, while on the open list, DFS had 7 left, BFS had 2 left, and A* had 9 left.
    DFS and BFS nodes are inserted at the front and at the end of the open list respectively, without caring which nodes are closer to the solution.
    As a result, the node with a good solution path to the goal could end up being stuck at the end of the open list, as demonstrated by BFS. 
    A* search, with the heuristic, sorts the nodes according to which ones are likely to be closer to the solution in front of the open list.

    (depth-first-search *start* *goals* *moves*)
    . . cut . .
    Found goal: (4 0)
    Solution path: ((0 0) (5 0) (2 3) (2 0) (0 2) (5 2) (4 3) (4 0))
    Length of open list: 7
    Length of closed list: 10
    T

    (breadth-first-search *start* *goals* *moves*)
    . . cut . .
    Found goal: (4 0)
    Solution path: ((0 0) (5 0) (2 3) (2 0) (0 2) (5 2) (4 3) (4 0))
    Length of open list: 2
    Length of closed list: 10
    T

    (a-star-search *start* *goals* *moves* *h*)
    . . cut . .
    ound goal: (4 0)
    Solution path: ((0 0) (5 0) (2 3) (2 0) (0 2) (5 2) (4 3) (4 0))
    Length of open list: 9
    Length of closed list: 10
    T

==== Part D ====

++ 8-Tile Puzzle ++

Surprisingly, the Out-of-Place heuristic and the Manhattan Distance heuristic achieved the same score for the first state,
with both of them finding the solution path with 8 nodes in the open list, and 3 nodes in the closed list. This could likely
be due to how my move functions are ordered -- up, down, right, left.

Tracing the Out-of-Place heristic path, it chose: up, right, down, which was a lucky order for this start state that easily
reached the goal state. If I changed my move function to be right, left, up, down, then the path would have likely chosen 
be a little longer. And, as proven by "Testing *startA* with moves right, left, up, down" section below, that was the case.

On the other hand, for *startB* on Out-of-Place heuristic, the program crashed after running for ~10 minutes. I attempted
to run it again, but it crashed again after around the same amount of time. Manhattan Distance heuristic, on the other hand,
completed the search in around ~1:30 minutes after searching through 1727 nodes and opening 1669 nodes.

-- Out of Place Heuristic
(a-star-search *startA* *goals* *moves* *h1*)
First node on open list: ((1 2 3 4 8 5 7 0 6) NIL).
First node on open list: ((1 2 3 4 0 5 7 8 6) ((1 2 3 4 8 5 7 0 6))).
First node on open list: ((1 2 3 4 5 0 7 8 6) ((1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6))).
Found goal: (1 2 3 4 5 6 7 8 0)
 Solution path: ((1 2 3 4 8 5 7 0 6) (1 2 3 4 0 5 7 8 6) (1 2 3 4 5 0 7 8 6)
 (1 2 3 4 5 6 7 8 0))
 Length of open list: 8
 Length of closed list: 3
T

(a-star-search *startB* *goals* *moves* *h1*)
. . CRASHED . .

-- Manhattan Distance Heuristic

(a-star-search *startA* *goals* *moves* *h2*)
First node on open list: ((1 2 3 4 8 5 7 0 6) NIL).
First node on open list: ((1 2 3 4 0 5 7 8 6) ((1 2 3 4 8 5 7 0 6))).
First node on open list: ((1 2 3 4 5 0 7 8 6) ((1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6))).
Found goal: (1 2 3 4 5 6 7 8 0)
 Solution path: ((1 2 3 4 8 5 7 0 6) (1 2 3 4 0 5 7 8 6) (1 2 3 4 5 0 7 8 6)
 (1 2 3 4 5 6 7 8 0))
 Length of open list: 8
 Length of closed list: 3
T

(a-star-search *startB* *goals* *moves* *h2*)
. . cut . .
First node on open list: ((1 2 3 4 0 5 7 8 6)
 ((1 2 3 4 8 5 7 0 6) (1 2 3 4 8 5 0 7 6) (1 2 3 0 8 5 4 7 6)
  (0 2 3 1 8 5 4 7 6) (2 0 3 1 8 5 4 7 6) (2 8 3 1 0 5 4 7 6)
  (2 8 3 1 7 5 4 0 6) (2 8 3 1 7 5 0 4 6) (2 8 3 0 7 5 1 4 6)
  (2 8 3 7 0 5 1 4 6) (2 8 3 7 4 5 1 0 6) (2 8 3 7 4 5 1 6 0)
  (2 8 3 7 4 0 1 6 5) (2 8 3 7 0 4 1 6 5) (2 8 3 7 6 4 1 0 5)
  (2 8 3 7 6 4 0 1 5) (2 8 3 0 6 4 7 1 5) (0 8 3 2 6 4 7 1 5)
  (8 0 3 2 6 4 7 1 5) (8 6 3 2 0 4 7 1 5) (8 6 3 2 1 4 7 0 5)
  (8 6 3 2 1 4 7 5 0))).
First node on open list: ((1 2 3 4 5 0 7 8 6)
 ((1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6) (1 2 3 4 8 5 0 7 6)
  (1 2 3 0 8 5 4 7 6) (0 2 3 1 8 5 4 7 6) (2 0 3 1 8 5 4 7 6)
  (2 8 3 1 0 5 4 7 6) (2 8 3 1 7 5 4 0 6) (2 8 3 1 7 5 0 4 6)
  (2 8 3 0 7 5 1 4 6) (2 8 3 7 0 5 1 4 6) (2 8 3 7 4 5 1 0 6)
  (2 8 3 7 4 5 1 6 0) (2 8 3 7 4 0 1 6 5) (2 8 3 7 0 4 1 6 5)
  (2 8 3 7 6 4 1 0 5) (2 8 3 7 6 4 0 1 5) (2 8 3 0 6 4 7 1 5)
  (0 8 3 2 6 4 7 1 5) (8 0 3 2 6 4 7 1 5) (8 6 3 2 0 4 7 1 5)
  (8 6 3 2 1 4 7 0 5) (8 6 3 2 1 4 7 5 0))).
Found goal: (1 2 3 4 5 6 7 8 0)
 Solution path: ((8 6 3 2 1 4 7 5 0) (8 6 3 2 1 4 7 0 5) (8 6 3 2 0 4 7 1 5)
 (8 0 3 2 6 4 7 1 5) (0 8 3 2 6 4 7 1 5) (2 8 3 0 6 4 7 1 5)
 (2 8 3 7 6 4 0 1 5) (2 8 3 7 6 4 1 0 5) (2 8 3 7 0 4 1 6 5)
 (2 8 3 7 4 0 1 6 5) (2 8 3 7 4 5 1 6 0) (2 8 3 7 4 5 1 0 6)
 (2 8 3 7 0 5 1 4 6) (2 8 3 0 7 5 1 4 6) (2 8 3 1 7 5 0 4 6)
 (2 8 3 1 7 5 4 0 6) (2 8 3 1 0 5 4 7 6) (2 0 3 1 8 5 4 7 6)
 (0 2 3 1 8 5 4 7 6) (1 2 3 0 8 5 4 7 6) (1 2 3 4 8 5 0 7 6)
 (1 2 3 4 8 5 7 0 6) (1 2 3 4 0 5 7 8 6) (1 2 3 4 5 0 7 8 6)
 (1 2 3 4 5 6 7 8 0))
 Length of open list: 1669
 Length of closed list: 1727
T

-- Testing *startA* with moves right, left, up, down
(a-star-search *startA* *goals* *moves* *h1*)
First node on open list: ((1 2 3 4 8 5 7 0 6) NIL).
First node on open list: ((1 2 3 4 8 5 7 6 0) ((1 2 3 4 8 5 7 0 6))).
First node on open list: ((1 2 3 4 0 5 7 8 6) ((1 2 3 4 8 5 7 0 6))).
First node on open list: ((1 2 3 4 5 0 7 8 6) ((1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6))).
Found goal: (1 2 3 4 5 6 7 8 0)
 Solution path: ((1 2 3 4 8 5 7 0 6) (1 2 3 4 0 5 7 8 6) (1 2 3 4 5 0 7 8 6)
 (1 2 3 4 5 6 7 8 0))
 Length of open list: 9
 Length of closed list: 4
T

(a-star-search *startA* *goals* *moves* *h2*)
First node on open list: ((1 2 3 4 8 5 7 0 6) NIL).
First node on open list: ((1 2 3 4 0 5 7 8 6) ((1 2 3 4 8 5 7 0 6))).
First node on open list: ((1 2 3 4 5 0 7 8 6) ((1 2 3 4 0 5 7 8 6) (1 2 3 4 8 5 7 0 6))).
Found goal: (1 2 3 4 5 6 7 8 0)
 Solution path: ((1 2 3 4 8 5 7 0 6) (1 2 3 4 0 5 7 8 6) (1 2 3 4 5 0 7 8 6)
 (1 2 3 4 5 6 7 8 0))
 Length of open list: 8
 Length of closed list: 3
T