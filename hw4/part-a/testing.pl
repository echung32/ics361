/**
 * 
 * This test file was generated by ChatGPT.
 * After loading file, start with `run_tests.`
 * 
 */

:- include("hw4main.pl").
:- begin_tests(relations).

% Tests for 'father' relationship
test(father_yesno_true) :-
    query([is,it,true,that,homer,is,the,father,of,lisa], _).
test(father_yesno_false) :-
    \+ query([is,it,true,that,abe,is,the,father,of,bart], _).
test(father_whois) :-
    query([who,is,the,father,of,lisa], homer).

% Tests for 'mother' relationship
test(mother_yesno_true) :-
    query([is,it,true,that,marge,is,the,mother,of,lisa], _).
test(mother_yesno_false) :-
    \+ query([is,it,true,that,jacqueline,is,the,mother,of,bart], _).
test(mother_whois) :-
    query([who,is,the,mother,of,ling], selma).

% Tests for 'sibling' relationship
test(sibling_yesno_true) :-
    query([is,it,true,that,lisa,is,the,sibling,of,bart], _).
test(sibling_yesno_false) :-
    \+ query([is,it,true,that,ling,is,the,sibling,of,lisa], _).
test(sibling_whois_multiple) :-
    query([who,is,the,sibling,of,bart], lisa).
test(sibling_whois_multiple) :-
    query([who,is,the,sibling,of,bart], maggie).

% Tests for 'sister'
test(sister_yesno) :-
    query([is,it,true,that,lisa,is,the,sister,of,bart], _).
test(sister_whois) :-
    query([who,is,the,sister,of,bart], lisa).

% Tests for 'brother'
test(brother_yesno) :-
    query([is,it,true,that,bart,is,the,brother,of,lisa], _).
test(brother_whois) :-
    query([who,is,the,brother,of,lisa], bart).

% Tests for 'grandfather' relationship
test(grandfather_yesno_true) :-
    query([is,it,true,that,abe,is,the,grandfather,of,lisa], _).
test(grandfather_yesno_false) :-
    \+ query([is,it,true,that,abe,is,the,grandfather,of,ling], _).
test(grandfather_whois_multiple) :-
    query([who,is,the,grandfather,of,lisa], abe).
test(grandfather_whois_multiple) :-
    query([who,is,the,grandfather,of,lisa], clancy).

% Tests for 'grandmother' relationship
test(grandmother_yesno_true) :-
    query([is,it,true,that,mona,is,the,grandmother,of,lisa], _).
test(grandmother_yesno_false) :-
    \+ query([is,it,true,that,patty,is,the,grandmother,of,ling], _).
test(grandmother_whois_multiple) :-
    query([who,is,the,grandmother,of,lisa], mona).
test(grandmother_whois_multiple) :-
    query([who,is,the,grandmother,of,lisa], jacqueline).

% Tests for 'husband' relationship
test(husband_yesno_true) :-
    query([is,it,true,that,homer,is,the,husband,of,marge], _).
test(husband_yesno_false) :-
    \+ query([is,it,true,that,abe,is,the,husband,of,selma], _).
test(husband_whois) :-
    query([who,is,the,husband,of,marge], homer).

% Tests for 'wife' relationship
test(wife_yesno_true) :-
    query([is,it,true,that,marge,is,the,wife,of,homer], _).
test(wife_yesno_false) :-
    \+ query([is,it,true,that,homer,is,the,wife,of,marge], _).
test(wife_whois) :-
    query([who,is,the,wife,of,homer], marge).

% Tests for 'aunt' relationship
test(aunt_yesno_true) :-
    query([is,it,true,that,patty,is,the,aunt,of,lisa], _).
test(aunt_yesno_false) :-
    \+ query([is,it,true,that,marge,is,the,aunt,of,maggie], _).
test(aunt_whois_multiple) :-
    query([who,is,the,aunt,of,lisa], patty).
test(aunt_whois_multiple) :-
    query([who,is,the,aunt,of,lisa], selma).

% Tests for 'uncle' relationship
test(uncle_yesno_true) :-
    query([is,it,true,that,herb,is,the,uncle,of,bart], _).
test(uncle_yesno_false) :-
    \+ query([is,it,true,that,abe,is,the,uncle,of,lisa], _).
test(uncle_whois) :-
    query([who,is,the,uncle,of,lisa], herb).

% Tests for 'cousin' relationship
test(cousin_yesno_true) :-
    query([is,it,true,that,ling,is,the,cousin,of,bart], _).
test(cousin_yesno_false) :-
    \+ query([is,it,true,that,lisa,is,the,cousin,of,herb], _).
test(cousin_whois) :-
    query([who,is,the,cousin,of,bart], ling).

% Tests for 'nephew' relationship
test(nephew_yesno_true) :-
    query([is,it,true,that,bart,is,the,nephew,of,patty], _).
test(nephew_yesno_false) :-
    \+ query([is,it,true,that,ling,is,the,nephew,of,selma], _).
test(nephew_whois) :-
    query([who,is,the,nephew,of,patty], bart).
test(nephew_whois) :-
    query([who,is,the,nephew,of,selma], bart).

% Tests for 'niece' relationship
test(niece_yesno_true) :-
    query([is,it,true,that,lisa,is,the,niece,of,patty], _).
test(niece_yesno_false) :-
    \+ query([is,it,true,that,bart,is,the,niece,of,selma], _).
test(niece_whois) :-
    query([who,is,the,niece,of,patty], lisa).
test(niece_whois) :-
    query([who,is,the,niece,of,selma], maggie).

% Tests for 'nibling' relationship
test(nibling_yesno_true) :-
    query([is,it,true,that,bart,is,the,nibling,of,patty], _).
test(nibling_yesno_true) :-
    query([is,it,true,that,lisa,is,the,nibling,of,selma], _).
test(nibling_yesno_false) :-
    \+ query([is,it,true,that,ling,is,the,nibling,of,homer], _).
test(nibling_whois) :-
    query([who,is,the,nibling,of,patty], bart).
test(nibling_whois) :-
    query([who,is,the,nibling,of,selma], lisa).
test(nibling_whois) :-
    query([who,is,the,nibling,of,selma], maggie).

% Tests for 'child'
test(child_yesno) :-
    query([is,it,true,that,bart,is,the,child,of,homer], _).
test(child_whois) :-
    query([who,is,the,child,of,marge], lisa).

% Tests for 'grandchild'
test(grandchild_yesno) :-
    query([is,it,true,that,lisa,is,the,grandchild,of,abe], _).
test(grandchild_whois) :-
    query([who,is,the,grandchild,of,abe], lisa).

% Tests for 'son'
test(son_yesno) :-
    query([is,it,true,that,bart,is,the,son,of,homer], _).
test(son_whois) :-
    query([who,is,the,son,of,homer], bart).

% Tests for 'daughter'
test(daughter_yesno) :-
    query([is,it,true,that,lisa,is,the,daughter,of,marge], _).
test(daughter_whois) :-
    query([who,is,the,daughter,of,marge], lisa).

% Tests for 'granddaughter'
test(granddaughter_yesno) :-
    query([is,it,true,that,lisa,is,the,granddaughter,of,mona], _).
test(granddaughter_whois) :-
    query([who,is,the,granddaughter,of,abe], lisa).

% Tests for 'grandson'
test(grandson_yesno) :-
    query([is,it,true,that,bart,is,the,grandson,of,abe], _).
test(grandson_whois) :-
    query([who,is,the,grandson,of,abe], bart).

% Tests for 'grandparent'
test(grandparent_yesno) :-
    query([is,it,true,that,abe,is,the,grandparent,of,lisa], _).
test(grandparent_whois) :-
    query([who,is,the,grandparent,of,bart], abe).

:- end_tests(relations).
